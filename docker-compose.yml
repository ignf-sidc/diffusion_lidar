version: '3'

services:
  api:
    container_name: api
    build:
      context: "./backend"  
      dockerfile: Dockerfile
      args:    
        - http_proxy
        - https_proxy
    volumes:
      - './backend:/backend'
    env_file:
      - .env
    environment:
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - PYTHONUNBUFFERED=1
      - ACCESS_KEY=${ACCESS_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - BUCKET=${BUCKET}
      - ENDPOINT_URL=${ENDPOINT}
      - REGION_NAME=${REGION}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - PGPORT=${PGPORT}
      - PGHOST=${PGHOST}
    ports:
      - "8000:8000"
    networks:
     - api
    depends_on:
      db:
        condition: service_healthy
  
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:    
        - http_proxy
        - https_proxy
    volumes:
      - './frontend:/usr/app'
      - '/frontend/node_modules'
    ports:
      - 3000:8080
    env_file:
      - .env
    environment:
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      # - HOST_NAME=${HOST_NAME}
      - CHOKIDAR_USEPOLLING=true
    networks:
     - api
    depends_on:
     - api

  db:
    image: kartoza/postgis:15-3.3
    volumes:
      - postgis-data:/var/lib/postgresql
      - dbbackups:/backups
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=gis
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
      - "5432"
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=docker pg_isready -h 127.0.0.1 -U docker -d gis"
      interval: 10s
      timeout: 10s
      retries: 4
    networks:
     - api

  adminer:
    image: adminer
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
     - api

networks:
  api :

volumes:
  postgis-data:
  dbbackups:
      